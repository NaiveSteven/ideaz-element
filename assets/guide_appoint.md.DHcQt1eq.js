import{_ as e,c as a,o as s,a9 as i}from"./chunks/framework.BoH8il8g.js";const u=JSON.parse('{"title":"约定","description":"","frontmatter":{},"headers":[],"relativePath":"guide/appoint.md","filePath":"guide/appoint.md","lastUpdated":1748875626000}'),o={name:"guide/appoint.md"},l=i(`<h1 id="约定" tabindex="-1">约定 <a class="header-anchor" href="#约定" aria-label="Permalink to &quot;约定&quot;">​</a></h1><p><code>数据驱动视图</code>的设计理念，通过简单配置数据项实现需求。</p><h2 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h2><p>目前支持的<code>element-plus</code>版本为<code>2.7.6</code>版本，会持续兼容。</p><h2 id="使用约定" tabindex="-1">使用约定 <a class="header-anchor" href="#使用约定" aria-label="Permalink to &quot;使用约定&quot;">​</a></h2><h3 id="字段命名" tabindex="-1">字段命名 <a class="header-anchor" href="#字段命名" aria-label="Permalink to &quot;字段命名&quot;">​</a></h3><p>表单和表格组件中，<code>column</code>项的配置是类似的。</p><ul><li><code>component</code>：配置展示组件</li><li><code>fieldProps</code>：配置组件属性</li><li><code>formItemProps</code>：装饰组件属性</li><li><code>field</code>：组件字段名</li><li><code>label</code>：标题</li><li><code>on + 事件</code>：组件的事件配置</li><li><code>slot</code>：插槽</li><li><code>render</code>：<code>h函数</code>或<code>render函数</code></li><li><code>hide</code>：显隐展示配置（基于<code>v-if</code>）</li><li><code>show</code>: 显隐展示配置（基于<code>v-show</code>）</li></ul><h3 id="内置组件" tabindex="-1">内置组件 <a class="header-anchor" href="#内置组件" aria-label="Permalink to &quot;内置组件&quot;">​</a></h3><p>表单或表格的<code>column</code>项，<code>component</code>字段支持<code>局部组件（受控组件）</code>、<code>全局组件（受控组件）</code>和内置组件。</p><p>内置组件包含：<code>input</code>、<code>select</code>、<code>radio</code>、<code>checkbox</code>，在表单和表格组件内部会被处理为<code>z-input</code>、<code>z-select</code>等。</p><p>使用示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ElInput } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-plus&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> columns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    component: ElInput</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    component: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;el-input&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    component: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h3><p>组件或<code>column</code>项，若支持<code>label</code>或<code>title</code>等字段，您可以传入例如<code>labelSlot</code>、<code>titleSlot</code>等带有<code>Slot</code>的字符串，组件内部会处理为插槽。</p><p>支持自定义的属性或配置，均支持<code>h函数</code>、<code>插槽</code>、<code>render函数</code>。</p><h2 id="默认配置" tabindex="-1">默认配置 <a class="header-anchor" href="#默认配置" aria-label="Permalink to &quot;默认配置&quot;">​</a></h2><p><code>ZForm</code>、<code>ZFilterForm</code>、<code>ZCrud</code>等组件会默认配置<code>placeholder</code>、<code>clearable</code>、<code>filterable</code>等属性，支持自定义。</p><p><code>ZFilterForm</code>表单响应式默认配置为<code>{ xl: 6, lg: 8, md: 8, sm: 12, xs: 24 }</code></p>`,19),d=[l];function n(c,t,p,h,r,k){return s(),a("div",null,d)}const m=e(o,[["render",n]]);export{u as __pageData,m as default};
